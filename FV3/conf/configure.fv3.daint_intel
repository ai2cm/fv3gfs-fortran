############
# commands #
############
FC = ftn
CC = cc
CXX = CC
LD = $(FC) -cxxlib

#########
# flags #
#########
# default is 64-bit OpenMP non-hydrostatic build using AVX2
DEBUG =
REPRO =
VERBOSE =
OPENMP = Y
AVX2 = Y
HYDRO = N
32BIT = N

NCEPLIBS_DIR = /project/s1053/install/ncep/intel
NEMSIOINC = -I$(NCEPLIBS_DIR)/include
NCEPLIBS = -L$(NCEPLIBS_DIR)/lib -lbacio_4 -lsp_v2.0.2_d -lw3nco_d
ifneq ($(OPENMP),)
  ifeq ($(32BIT),Y)
    FMS_DIR = /project/s1053/install/fms/intel_r4
  else
    FMS_DIR = /project/s1053/install/fms/intel_r8
  endif
else
  ifeq ($(32BIT),Y)
    FMS_DIR = /project/s1053/install/fms/intel_r4_noomp
  else
    FMS_DIR = /project/s1053/install/fms/intel_r8_noomp
  endif
endif
ESMF_DIR = /project/s1053/install/esmf/8.0.0_intel
MKL_DIR = $(MKLROOT)

##############################################
# Need to use at least GNU Make version 3.81 #
##############################################
need := 3.81
ok := $(filter $(need),$(firstword $(sort $(MAKE_VERSION) $(need))))
ifneq ($(need),$(ok))
$(error Need at least make version $(need).  Load module gmake/3.81)
endif

INCLUDE = -I$(NETCDF_DIR)/include -I$(ESMF_DIR)/include -I$(FMS_DIR)/include -I$(MKL_DIR)/include -I$(MKL_DIR)/include/intel64/ilp64

FPPFLAGS := -cpp -Wp,-w $(INCLUDE)
CFLAGS := $(INCLUDE) -qno-opt-dynamic-align

FFLAGS := $(INCLUDE) -fno-alias -auto -safe-cray-ptr -ftz -assume byterecl -nowarn -sox -align array64byte -i4 -qno-opt-dynamic-align
CPPDEFS += -Duse_libMPI -Duse_netCDF -DSPMD -DUSE_LOG_DIAG_FIELD_INFO -Duse_LARGEFILE -DUSE_GFSL63 -DGFS_PHYS
CPPDEFS += -DNEW_TAUCTMAX -DINTERNAL_FILE_NML -DNO_INLINE_POST -D__GFORTRAN__ -DDISABLE_ESMF_DGEMM

ifeq ($(GT4PY_DEV),Y)
CPPDEFS += -DGT4PY_DEV
endif

ifeq ($(SUBSET_PHYSICS),Y)
CPPDEFS += -DSUBSET_PHYSICS
endif

ifneq ($(HYDRO),Y)
CPPDEFS += -DMOIST_CAPPA -DUSE_COND
endif

ifeq ($(32BIT),Y)
CPPDEFS += -DOVERLOAD_R4 -DOVERLOAD_R8
FFLAGS += -real-size 32
else
FFLAGS += -real-size 64 -no-prec-div -no-prec-sqrt
endif

ifeq ($(AVX2),Y)
FFLAGS += -xCORE-AVX2
CFLAGS += -xCORE-AVX2
else
FFLAGS += -xHOST
CFLAGS += -xHOST
endif

FFLAGS_OPT = -O2 -debug minimal -fp-model source -qoverride-limits -qopt-prefetch=3
FFLAGS_REPRO = -O2 -debug minimal -fp-model source -qoverride-limits -g -traceback
FFLAGS_DEBUG = -g -O0 -check -check noarg_temp_created -check nopointer -warn -warn noerrors -fp-stack-check -fstack-protector-all -fpe0 -debug -traceback -ftrapuv

FFLAGS_OPENMP = -qopenmp
FFLAGS_VERBOSE = -v -V -what

CFLAGS += -D__IFC -sox -fp-model source

CFLAGS_OPT = -O2 -debug minimal
CFLAGS_REPRO = -O2 -debug minimal
CFLAGS_OPENMP = -qopenmp
CFLAGS_DEBUG = -O0 -g -ftrapuv -traceback

LDFLAGS :=
LDFLAGS_OPENMP := -qopenmp
LDFLAGS_VERBOSE := -Wl,-V,--verbose,-cref,-M

# start with blank LIBS
LIBS := -L/opt/intel/compilers_and_libraries_2019.1.144/linux/compiler/lib -lifcoremt

FAST :=
ifneq ($(REPRO),)
CFLAGS += $(CFLAGS_REPRO)
FFLAGS += $(FFLAGS_REPRO)
else ifneq ($(DEBUG),)
CFLAGS += $(CFLAGS_DEBUG)
FFLAGS += $(FFLAGS_DEBUG)
else ifneq ($(TEST),)
CFLAGS += $(CFLAGS_TEST)
FFLAGS += $(FFLAGS_TEST)
else
CFLAGS += $(CFLAGS_OPT)
FFLAGS += $(FFLAGS_OPT)
endif

ifneq ($(OPENMP),)
CFLAGS += $(CFLAGS_OPENMP)
FFLAGS += $(FFLAGS_OPENMP)
LDFLAGS += $(LDFLAGS_OPENMP)
endif

ifneq ($(VERBOSE),)
CFLAGS += $(CFLAGS_VERBOSE)
FFLAGS += $(FFLAGS_VERBOSE)
LDFLAGS += $(LDFLAGS_VERBOSE)
endif

LIBS += -L$(ESMF_DIR)/lib -lesmf -L$(FMS_DIR)/lib -lfms -L$(NETCDF_DIR)/lib -lnetcdff -lnetcdf

# Intel MKL library support
LIBS += -L$(MKL_DIR)/lib/intel64 -Wl,--start-group $(MKL_DIR)/lib/intel64/libmkl_intel_lp64.a $(MKL_DIR)/lib/intel64/libmkl_intel_thread.a $(MKL_DIR)/lib/intel64/libmkl_core.a -Wl,--end-group -liomp5 -lpthread -lm

LDFLAGS += $(LIBS)
