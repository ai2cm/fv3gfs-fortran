version: 2.1
orbs:
  gcp-gcr: circleci/gcp-gcr@0.15.0
commands:
  initialize_nix:
    steps:
      - run: nix-env -i git openssh google-cloud-sdk
      - checkout
      - run:
          name: "gcloud auth"
          command: |
            echo $ENCODED_GCR_KEY | base64 -d > $GOOGLE_APPLICATION_CREDENTIALS
      - run:
          name: "Pull Submodules"
          command: |
            git submodule init
            git submodule update
      - run: |
          nix-env -iA cachix -f https://cachix.org/api/v1/install
          cachix use vulcanclimatemodeling
          nix-build -j 4 -A fms | cachix push vulcanclimatemodeling
  build_repro:
    steps:
      - restore_cache:
          name: Restore nix build cache
          keys:
            - nix-fv3gfs-fortran-repro-{{ .Environment.CIRCLE_SHA1 }}
      - run: |
          nix-shell --run "cd FV3 && bash configure nix && cd .. && make build_repro"
      - run:
          name: Build wrapper
          command: nix-shell --run "make build_wrapper"
      - save_cache:
          name: Save nix build cache
          key: nix-fv3gfs-fortran-repro-{{ .Environment.CIRCLE_SHA1 }}
          paths:
            - FV3/
  build_debug:
    steps:
      - restore_cache:
          name: Restore nix build cache
          keys:
            - nix-fv3gfs-fortran-debug-{{ .Environment.CIRCLE_SHA1 }}
      - run: |
          nix-shell --run "cd FV3 && bash configure nix && cd .. && make build_debug"
      - save_cache:
          name: Save nix build cache
          key: nix-fv3gfs-fortran-debug-{{ .Environment.CIRCLE_SHA1 }}
          paths:
            - FV3/
  test_fortran_basic:
    steps:
      - run:
          name: Test fortran
          command: nix-shell --run "make test_fortran_basic"
  test_wrapper_basic:
    steps:
      - run:
          name: Test wrapper
          command: nix-shell --run "make -C FV3/wrapper test_basic"
  test_fortran_coarse_graining:
    steps:
      - run:
          name: Test fortran
          command: nix-shell --run "make test_fortran_coarse_graining"
  test_wrapper_coarse_graining:
    steps:
      - run:
          name: Test wrapper
          command: nix-shell --run "make -C FV3/wrapper test_coarse_graining"

jobs:
  nix-full-repro:
    docker:
      - image: nixos/nix
    environment:
      FV3CONFIG_CACHE_DIR: /tmp/.fv3config
      GOOGLE_APPLICATION_CREDENTIALS: /tmp/key.json
      FSSPEC_GS_REQUESTER_PAYS: vcm-ml
    steps:
      - initialize_nix
      - build_repro
      - run:
          name: Test fortran
          command: nix-shell --run "make test_fortran"
      - run:
          name: Test wrapper
          command: nix-shell --run "make -C FV3/wrapper test"
  nix-full-debug:
    docker:
      - image: nixos/nix
    environment:
      FV3CONFIG_CACHE_DIR: /tmp/.fv3config
      GOOGLE_APPLICATION_CREDENTIALS: /tmp/key.json
      FSSPEC_GS_REQUESTER_PAYS: vcm-ml
    steps:
      - initialize_nix
      - build_debug
      - run:
          name: Test fortran
          command: nix-shell --run "make test_fortran"
  nix-basic-repro:
    docker:
      - image: nixos/nix
    environment:
      FV3CONFIG_CACHE_DIR: /tmp/.fv3config
      GOOGLE_APPLICATION_CREDENTIALS: /tmp/key.json
      FSSPEC_GS_REQUESTER_PAYS: vcm-ml
    steps:
      - initialize_nix
      - build_repro
      - test_fortran_basic
      - test_wrapper_basic
  nix-basic-debug:
    docker:
      - image: nixos/nix
    environment:
      FV3CONFIG_CACHE_DIR: /tmp/.fv3config
      GOOGLE_APPLICATION_CREDENTIALS: /tmp/key.json
      FSSPEC_GS_REQUESTER_PAYS: vcm-ml
    steps:
      - initialize_nix
      - build_debug
      - test_fortran_basic
  nix-coarse-graining-repro:
    docker:
      - image: nixos/nix
    environment:
      FV3CONFIG_CACHE_DIR: /tmp/.fv3config
      GOOGLE_APPLICATION_CREDENTIALS: /tmp/key.json
      FSSPEC_GS_REQUESTER_PAYS: vcm-ml
    steps:
      - initialize_nix
      - build_repro
      - test_fortran_coarse_graining
      - test_wrapper_coarse_graining
  nix-coarse-graining-debug:
    docker:
      - image: nixos/nix
    environment:
      FV3CONFIG_CACHE_DIR: /tmp/.fv3config
      GOOGLE_APPLICATION_CREDENTIALS: /tmp/key.json
      FSSPEC_GS_REQUESTER_PAYS: vcm-ml
    steps:
      - initialize_nix
      - build_debug
      - test_fortran_coarse_graining
  nix-emulation-repro:
    docker:
      - image: nixos/nix
    environment:
      FV3CONFIG_CACHE_DIR: /tmp/.fv3config
      GOOGLE_APPLICATION_CREDENTIALS: /tmp/key.json
      FSSPEC_GS_REQUESTER_PAYS: vcm-ml
    steps:
      - initialize_nix
      - build_repro
      - run:
          name: Test fortran
          command: nix-shell --run "make test_fortran_emulation"
      - run:
          name: Test wrapper
          command: nix-shell --run "make -C FV3/wrapper test_emulation"
  nix-unmarked-repro:
    docker:
      - image: nixos/nix
    environment:
      FV3CONFIG_CACHE_DIR: /tmp/.fv3config
      GOOGLE_APPLICATION_CREDENTIALS: /tmp/key.json
      FSSPEC_GS_REQUESTER_PAYS: vcm-ml
    steps:
      - initialize_nix
      - build_repro
      - run:
          name: Test fortran
          command: nix-shell --run "make test_fortran_unmarked"
  nix-wrapper-repro:
    docker:
      - image: nixos/nix
    environment:
      FV3CONFIG_CACHE_DIR: /tmp/.fv3config
      GOOGLE_APPLICATION_CREDENTIALS: /tmp/key.json
      FSSPEC_GS_REQUESTER_PAYS: vcm-ml
    steps:
      - initialize_nix
      - build_repro
      - run:
          name: Test wrapper
          command: nix-shell --run "make -C FV3/wrapper test"
  lint:
    docker:
      - image: circleci/python:3.9
    steps:
      - checkout
      - run: sudo pip3 install pre-commit==2.15.0
      - run: pre-commit

workflows:
  version: 2
  build:
    jobs:
      - lint
      - nix-basic-repro:
          name: Minimal fortran and wrapper tests in repro mode
          filters:
            branches:
              ignore: master
      - nix-basic-debug:
          name: Minimal fortran tests in debug mode
          filters:
            branches:
              ignore: master
      - hold-nix-coarse-graining:
          name: Launch coarse graining tests
          type: approval
          filters:
            branches:
              ignore: master
      - nix-coarse-graining-repro:
          name: Coarse graining tests in repro mode
          requires:
            - Minimal fortran and wrapper tests in repro mode
            - Launch coarse graining tests
          filters:
            branches:
              ignore: master
      - nix-coarse-graining-debug:
          name: Coarse graining tests in debug mode
          requires:
            - Minimal fortran tests in debug mode
            - Launch coarse graining tests
          filters:
            branches:
              ignore: master
      - hold-nix-emulation-repro:
          name: Launch emulation tests
          type: approval
          filters:
            branches:
              ignore: master
      - nix-emulation-repro:
          name: Emulation tests
          requires:
            - Minimal fortran and wrapper tests in repro mode
            - Launch emulation tests
          filters:
            branches:
              ignore: master
      - hold-nix-unmarked-repro:
          name: Launch unmarked fortran tests
          type: approval
          filters:
            branches:
              ignore: master
      - nix-unmarked-repro:
          name: Unmarked fortran tests
          requires:
            - Minimal fortran and wrapper tests in repro mode
            - Launch unmarked fortran tests
          filters:
            branches:
              ignore: master
      - hold-nix-wrapper-repro:
          name: Launch wrapper tests
          type: approval
          filters:
            branches:
              ignore: master
      - nix-wrapper-repro:
          name: Wrapper tests
          requires:
            - Minimal fortran and wrapper tests in repro mode
            - Launch wrapper tests
          filters:
            branches:
              ignore: master
      - nix-full-repro:
          name: "Full tests in repro mode"
          filters:
            branches:
              only: master
      - nix-full-debug:
          name: "Full tests in debug mode"
          filters:
            branches:
              only: master
