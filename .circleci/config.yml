version: 2.1
orbs:
  gcp-gcr: circleci/gcp-gcr@0.15.0
commands:
  nix:
    description: "Build fortran and wrapper in nix environment"
    steps:
      - run: nix-env -i git openssh google-cloud-sdk
      - checkout
      - run:
          name: "gcloud auth"
          command: |
            echo $ENCODED_GCR_KEY | base64 -d > $GOOGLE_APPLICATION_CREDENTIALS
      - run:
          name: "Pull Submodules"
          command: |
            git submodule init
            git submodule update
      - restore_cache:
          name: Restore nix build cache
          keys:
            - nix-fv3gfs-fortran-{{ .Environment.CIRCLE_SHA1 }}
      - run: |
          nix-env -iA cachix -f https://cachix.org/api/v1/install
          cachix use vulcanclimatemodeling
      - run: |
          nix-build -j 4 -A fms | cachix push vulcanclimatemodeling
          nix-shell --run "cd FV3 && bash configure nix && make -j 4"
      - run:
          name: Build wrapper
          command: nix-shell --run "make -j 4 -C FV3 wrapper_build"
      - save_cache:
          name: Save nix build cache
          key: nix-fv3gfs-fortran-{{ .Environment.CIRCLE_SHA1 }}
          paths:
            - FV3/
jobs:
  nix-full:
    docker:
      - image: nixos/nix
    environment:
      FV3CONFIG_CACHE_DIR: /tmp/.fv3config
      GOOGLE_APPLICATION_CREDENTIALS: /tmp/key.json
      FSSPEC_GS_REQUESTER_PAYS: vcm-ml
    steps:
      - nix
      - run:
          name: Test fortran
          command: nix-shell --run "make test_native_fortran"
      - run:
          name: Test wrapper
          command: nix-shell --run "make -C FV3/wrapper test"
  nix-basic:
    docker:
      - image: nixos/nix
    environment:
      FV3CONFIG_CACHE_DIR: /tmp/.fv3config
      GOOGLE_APPLICATION_CREDENTIALS: /tmp/key.json
      FSSPEC_GS_REQUESTER_PAYS: vcm-ml
    steps:
      - nix
      - run:
          name: Test fortran
          command: nix-shell --run "make test_native_fortran_basic"
      - run:
          name: Test wrapper
          command: nix-shell --run "make -C FV3/wrapper test_basic"
  nix-coarse-graining:
    docker:
      - image: nixos/nix
    environment:
      FV3CONFIG_CACHE_DIR: /tmp/.fv3config
      GOOGLE_APPLICATION_CREDENTIALS: /tmp/key.json
      FSSPEC_GS_REQUESTER_PAYS: vcm-ml
    steps:
      - nix
      - run:
          name: Test fortran
          command: nix-shell --run "make test_native_fortran_coarse_graining"
      - run:
          name: Test wrapper
          command: nix-shell --run "make -C FV3/wrapper test_coarse_graining"
  nix-emulation:
    docker:
      - image: nixos/nix
    environment:
      FV3CONFIG_CACHE_DIR: /tmp/.fv3config
      GOOGLE_APPLICATION_CREDENTIALS: /tmp/key.json
      FSSPEC_GS_REQUESTER_PAYS: vcm-ml
    steps:
      - nix
      - run:
          name: Test fortran
          command: nix-shell --run "make test_native_fortran_emulation"
      - run:
          name: Test wrapper
          command: nix-shell --run "make -C FV3/wrapper test_emulation"
  nix-unmarked:
    docker:
      - image: nixos/nix
    environment:
      FV3CONFIG_CACHE_DIR: /tmp/.fv3config
      GOOGLE_APPLICATION_CREDENTIALS: /tmp/key.json
      FSSPEC_GS_REQUESTER_PAYS: vcm-ml
    steps:
      - nix
      - run:
          name: Test fortran
          command: nix-shell --run "make test_native_fortran_unmarked"
  nix-wrapper:
    docker:
      - image: nixos/nix
    environment:
      FV3CONFIG_CACHE_DIR: /tmp/.fv3config
      GOOGLE_APPLICATION_CREDENTIALS: /tmp/key.json
      FSSPEC_GS_REQUESTER_PAYS: vcm-ml
    steps:
      - nix
      - run:
          name: Test wrapper
          command: nix-shell --run "make -C FV3/wrapper test"
  lint:
    docker:
      - image: circleci/python:3.9
    steps:
      - checkout
      - run: sudo pip3 install pre-commit==2.15.0
      - run: pre-commit
  build_default:
    machine:
      docker_layer_caching: true
      image: ubuntu-2004:202111-02
    environment:
      FV3CONFIG_CACHE_DIR: /tmp/.fv3config
      GOOGLE_APPLICATION_CREDENTIALS: /tmp/key.json
      FSSPEC_GS_REQUESTER_PAYS: vcm-ml
    steps:
      - checkout
      - run:
          name: "gcloud auth"
          command: |
            echo $ENCODED_GCR_KEY | base64 -d > $GOOGLE_APPLICATION_CREDENTIALS
            echo "export GCLOUD_SERVICE_KEY=\$(echo \$ENCODED_GCR_KEY | base64 --decode)" >> $BASH_ENV
      - gcp-gcr/gcr-auth
      - run: 
          name: "Pull dependency images"
          command: |
            echo "$ENCODED_GCR_KEY" | base64 --decode | docker login --username _json_key --password-stdin https://gcr.io
            make pull_deps
      - run:
          name: "Pull Submodules"
          command: |
            git submodule init
            git submodule update
      - run: DOCKER_BUILDKIT=1 BUILDKIT_PROGRESS=plain BUILD_FROM_INTERMEDIATE=y make build build_debug build_serialize
      - restore_cache:
          keys:
            - v1.4-{{ checksum "requirements.txt"}}
      - run: 
          name: "Install Python test dependencies"
          command: |
            pyenv versions
            [ -d /opt/circleci/.pyenv/versions/3.9.7 ] || pyenv install 3.9.7
            pyenv global 3.9.7
            pip install -r requirements.txt
      - save_cache:
          paths:
            - $FV3CONFIG_CACHE_DIR
            - /opt/circleci/.pyenv/versions/3.9.7
          key: v1.4-{{ checksum "requirements.txt"}}
      # tests
      - run: 
          name: "Run pytest tests"
          # -s to avoid capturing stdout/stderr of md5sum call
          command: |
            make test
          no_output_timeout: 1200
      - run: make push_deps
      - run:
          name: "Delete data files"
          command: |
            rm ./tests/pytest/output/*/*/INPUT/*.nc
            rm ./tests/pytest/output/*/*/*/*.grb
          when: on_fail
      - store_artifacts:
          path: ./tests/pytest/output
workflows:
  version: 2
  build:
    jobs:
      - lint
      - nix-basic:
          name: Minimal native fortran and wrapper tests
          filters:
            branches:
              ignore: master
      - hold-nix-coarse-graining:
          name: Launch coarse graining tests
          type: approval
          filters:
            branches:
              ignore: master
      - nix-coarse-graining:
          name: Coarse graining tests
          requires:
            - Minimal native fortran and wrapper tests
            - Launch coarse graining tests
          filters:
            branches:
              ignore: master
      - hold-nix-emulation:
          name: Launch emulation tests
          type: approval
          filters:
            branches:
              ignore: master
      - nix-emulation:
          name: Emulation tests
          requires:
            - Minimal native fortran and wrapper tests
            - Launch emulation tests
          filters:
            branches:
              ignore: master
      - hold-nix-unmarked:
          name: Launch unmarked fortran tests
          type: approval
          filters:
            branches:
              ignore: master
      - nix-unmarked:
          name: Unmarked fortran tests
          requires:
            - Minimal native fortran and wrapper tests
            - Launch unmarked fortran tests
          filters:
            branches:
              ignore: master
      - hold-nix-wrapper:
          name: Launch wrapper tests
          type: approval
          filters:
            branches:
              ignore: master
      - nix-wrapper:
          name: Wrapper tests
          requires:
            - Minimal native fortran and wrapper tests
            - Launch wrapper tests
          filters:
            branches:
              ignore: master
      - build_default
      - nix-full:
          name: "Full native tests"
          filters:
            branches:
              only: master
